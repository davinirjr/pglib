{"name":"pglib","tagline":"A simple Python 3.3+ library for PostgreSQL based on libpq","body":"## Welcome to pglib\r\npglib is a Python 3.3+ library that is as Pythonic and convenient as possible that maps directly to the PostgreSQL client interface known as \"libpq\".\r\n\r\nIt was written for use on OS/X and Linux, but is now being tested for 64-bit Python on Windows.\r\n\r\nIt is a C-extension so you will need the PostgreSQL header and library files to build!\r\n\r\n### Building\r\nTo build, download the source from github.com and use the setup.py file.\r\n\r\n#### OS/X and Linux\r\n\r\nOn OS/X and Linux:\r\n```\r\n$ git clone https://github.com/mkleehammer/pglib.git\r\n$ cd pglib\r\n$ python3 setup.py build\r\n$ sudo python3 setup.py install\r\n```\r\n\r\nIf you have build problems, make sure you have the PostgreSQL headers.  On OS/X, you will need Xcode installed *and* the command line tools downloaded (in Xcode preferences on the Downloads tab).\r\n\r\n### Windows 64-bit\r\n\r\nBuilding on Windows uses the same steps, but configuring the environment is not as easy.  You will need:\r\n* Visual Studio 10 for Python 3.3\r\n* The PostgreSQL headers and libraries\r\n* A setup.cfg file to allow setup.py to locate the headers and libraries.\r\n* libpq.dll must be in the path to import\r\n\r\nThe version of Visual Studio must be that same as the one used to build your version of Python.  Python 3.3 was built with Visual Studio 10.  Python's built-in distutils knows how to find this.\r\n\r\nThe PostgreSQL files can come from an installed version or by downloading a [zipped version](http://www.enterprisedb.com/products-services-training/pgbindownload).  There will be 3 directories you will need to find: pgsql\\bin, pgsql\\lib, and pgsql\\include.\r\n\r\nUnfortunately the PostgreSQL headers include the Python 2.7 header files which you do not want used.  So, you must configure the include files to specifically include your Python header files *then* the PostgreSQL header files.  The Python header files are in the 'include' directory under the Python installation.  \r\n\r\nPut these directories into a setup.cfg file in the pglib directory like so:\r\n```\r\n[build_ext]\r\ninclude_dirs=c:\\bin\\python33-64\\include;c:\\bin\\pgsql\\include\r\nlibrary-dirs=c:\\bin\\pgsql\\lib\r\n```\r\n\r\nObviously update the directories to match yours.\r\n\r\nOnce this is done, run: ```python setup.py build install```.  Make sure that the version of Python in your path is 3.3.\r\n\r\nThe end result is a pglib.pyd file that can be imported using `import pglib`, but it uses the DLL version of glib.\r\n\r\n# Using pglib\r\n\r\npglib exposes [libpq](http://www.postgresql.org/docs/9.1/static/libpq.html) API to Python, so it may be helpful to familiarize yourself with it.  At this time only synchronous functions are exported.\r\n\r\npglib will only return columns for datatype that it knows about.  If you need more data types, please open an [issue](https://github.com/mkleehammer/pglib/issues).  There are also plans to introduce converter functions so you can provide your own conversions.  Again, if you need this, please open an issue.\r\n\r\n## Importing\r\n\r\nThe module name is `pglib` and importing is as simple as using ```import pglib```.  On Windows the module dynamically links to libpq.dll, so it and all of its dependancies will need to be on the path.\r\n\r\nThe pglib version is available via the ```pglib.version``` string.\r\n\r\n## Connecting\r\n\r\nThe `connect` function accepts a libpq connection string and passes it to [PQconnectdb](http://www.postgresql.org/docs/9.1/static/libpq-connect.html#LIBPQ-PQCONNECTDB) and returns a Connection object.\r\n\r\n```\r\nimport pglib\r\ncnxn = pglib.connect(\"host=localhost dbname=test\")\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}